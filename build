#!/usr/bin/env python3
import argparse
import time
import sys
import getopt
import subprocess
import os
import sys
from sys import platform
import json
import base64

from tqdm import tqdm
import urllib.request

def download(url, filename):
    import functools
    import pathlib
    import shutil
    import requests
    import tqdm

    r = requests.get(url, stream=True, allow_redirects=True)
    if r.status_code != 200:
        r.raise_for_status()  # Will only raise for 4xx codes, so...
        raise RuntimeError(f"Request to {url} returned status code {r.status_code}")
    file_size = int(r.headers.get('Content-Length', 0))

    path = pathlib.Path(filename).expanduser().resolve()
    path.parent.mkdir(parents=True, exist_ok=True)

    desc = "(Unknown total file size)" if file_size == 0 else ""
    r.raw.read = functools.partial(r.raw.read, decode_content=True)  # Decompress if needed
    with tqdm.tqdm.wrapattr(r.raw, "read", total=file_size, desc=desc) as r_raw:
        with path.open("wb") as f:
            shutil.copyfileobj(r_raw, f)

    return path




def pbar(r,sl=0.02):
  for i in tqdm(range(r)):
      time.sleep(sl)

CEND      = '\33[0m'
CBOLD     = '\33[1m'
CITALIC   = '\33[3m'
CURL      = '\33[4m'
CBLINK    = '\33[5m'
CBLINK2   = '\33[6m'
CSELECTED = '\33[7m'

CBLACK  = '\33[30m'
CRED    = '\33[31m'
CGREEN  = '\33[32m'
CYELLOW = '\33[33m'
CBLUE   = '\33[34m'
CVIOLET = '\33[35m'
CBEIGE  = '\33[36m'
CWHITE  = '\33[37m'

CBLACKBG  = '\33[40m'
CREDBG    = '\33[41m'
CGREENBG  = '\33[42m'
CYELLOWBG = '\33[43m'
CBLUEBG   = '\33[44m'
CVIOLETBG = '\33[45m'
CBEIGEBG  = '\33[46m'
CWHITEBG  = '\33[47m'

CGREY    = '\33[90m'
CRED2    = '\33[91m'
CGREEN2  = '\33[92m'
CYELLOW2 = '\33[93m'
CBLUE2   = '\33[94m'
CVIOLET2 = '\33[95m'
CBEIGE2  = '\33[96m'
CWHITE2  = '\33[97m'

CGREYBG    = '\33[100m'
CREDBG2    = '\33[101m'
CGREENBG2  = '\33[102m'
CYELLOWBG2 = '\33[103m'
CBLUEBG2   = '\33[104m'
CVIOLETBG2 = '\33[105m'
CBEIGEBG2  = '\33[106m'
CWHITEBG2  = '\33[107m'

def send_help():
    print('USAGE: build [options]')
    print('A build tool created by Ehnryu\n')
    print('Basic options:\n')
    print('--compress : compress an archive\n')

def printc(color,*text):
  CEND      = '\33[0m'
  print(color + text[0] + CEND)



def run(command):
    subprocess.check_output(command,shell=True)

def build():
    advanced = ["sendargs ="]


    argv = sys.argv[1:]
    opts = []
    tba = sys.argv[0]
    for item in ["build","build.py","main.py"]:
        if item in tba:
            tba = item

    if tba in ["build","build.py","main.py"]:
      return {"x":"t","args":sys.argv}
    try:
      opts, args = getopt.getopt(argv, "h",advanced)


    except:
        printc(CRED,"ERROR: Invalid arguments provided.")
        send_help()

    for opt, arg in opts:

        if opt in ["-h","--help"]:
          send_help()
        if opt in ["--sendargs"]:
          return {"x":"t","args":sys.argv}





x = build()

if x["x"] == "t":
  args = x["args"]
  argz = ""
  for item in args:
    if item not in ["build","build.py","main.py","--sendargs"]:
      if item != args[len(args)-1]:
        argz += f"{item},"
      else:
        argz += f"{item}"
  files = []
  for file in os.listdir(os.getcwd()):
    files.append(file)
  if "Buildfile" in files:
    xylo = False
    tex = ""
    line = 0
    function = ""
    printc(CVIOLET,"Running build ...")
    f = open("Buildfile", "r")
    for item in f.readlines():
      item = item.rstrip()
      if "--viewcomments" in args or "-vc" in args:
        if item.startswith("#"):
          printc(CBEIGE,f"COMMENT: {item}")
      if item.startswith("#") == False:
        item = item.replace("*getargs",str(argz).rstrip())
        item = item.replace("*getplatform",str(sys.platform).rstrip())

        if item.startswith("@reqOS"):
            item = item.replace("@reqOS ","")
            item = item.split(",")
            if sys.platform not in item:
                raise RuntimeError(f"OS not supported. RequiredOS: {item} YourOS: {sys.platform}")

        if item.startswith("@uOS"):
            item = item.replace("@uOS ","")
            item = item.split(",")
            if sys.platform in item:
                raise RuntimeError(f"OS not supported. UnsupportedOS: {item} YourOS: {sys.platform}")

        elif item.startswith("@dl"):
            url = ""
            output = ""
            item = item.replace("@dl ","")
            item = item.split()
            for itex in item:
                if itex.startswith("url:"):
                    url = itex.replace("url:","")
                if itex.startswith("opt:"):
                    output = itex.replace("opt:","")
            if "-y" not in args and "-n" not in args:
                printc(CYELLOW,"Download Query:")
                query = input(f"""download {url} "y/n" ? """)
            else:
                if "-n" in args:
                    query = "n"
                if "-y" in args:
                    query = "y"
            if query == "y":
                download(url,output)
            if query == "n":
                printc(CRED,"Aborted download")


        elif item.startswith("@addpkg"):
            pkg = ""
            lang = ""
            default = ""
            flags = ""
            item = item.replace("@addpkg ","")
            item = item.split()
            for word in item:
                if word.startswith("pkg:"):
                    pkg = word.replace("pkg:","")
                if word.startswith("lang:"):
                    lang = word.replace("lang:","")
                if word.startswith("pm:"):
                    default = word.replace("pm:","")
                if word.startswith("flags:"):
                    flags = word.replace("flags:","")
                    flags = flags.replace("/"," ")
            if default != "":
                printc(CGREEN,f"{pm} install {pkg} {flags}")
                run(f"{pm} install {pkg} {flags}")
            else:
                if lang in ["py","python"]:
                    printc(CGREEN,f"pip install {pkg} {flags}")
                    run(f"pip install {pkg} {flags}")
                elif lang in ["js","javascript"]:
                    printc(CGREEN,f"npm install {pkg} {flags}")
                    run(f"npm install {pkg} {flags}")
                elif lang in ["deb","apt"]:
                    print(f"apt install {pkg} {flags}")
                    run(f"apt install {pkg} {flags}")





        else:


            if item.endswith(":") and item.startswith("func"):
              print(CRED,f"Running function {item}")
              function = item
              line = 0


            else:
              if xylo:
                tex += f"\n{item}"
              else:
                line += 1
                printc(CVIOLET2,f"Running line {line} of {function}")
                if item.startswith("@python def") == False and item.startswith("@dp") == False:
                  print(CBLUE2,item)
                if item.startswith("@dp"):
                    item = item.replace("@dp ","")
                if item.startswith("@q "):
                  run(item.replace("@q ",""))
                elif item.startswith("@python "):
                  item = item.replace("@python ","")
                  if item.startswith("def"):
                    printc(CRED,"Exectuting python function!")

                    item = item.replace("||","\n")
                    item = item.replace("?|?","  ")
                    printc(CGREEN,item)
                    exec(str(item))

                  else:
                    printc(CRED,str(eval(item)))
                else:
                  os.system(item)
  elif "Makefile" in files:
    printc(CVIOLET,"Running make ...")
    run("make")
